{"version":3,"file":"Data.cjs","sources":["../../src/misc/data.ts"],"sourcesContent":["import isHTMLElement from '../is/isHTMLElement';\n\nconst componentData = new Map<string, Map<HTMLElement, any>>();\n\n/**\n * An interface for web components background data.\n *\n * @see https://github.com/thednp/bootstrap.native/blob/master/src/components/base-component.js\n */\nconst Data = {\n  /**\n   * Sets web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @param instance the component instance\n   */\n  set: <T>(element: HTMLElement, component: string, instance: T): void => {\n    if (!isHTMLElement(element)) return;\n\n    /* istanbul ignore else */\n    if (!componentData.has(component)) {\n      componentData.set(component, new Map<HTMLElement, T>());\n    }\n\n    const instanceMap = componentData.get(component) as Map<HTMLElement, T>;\n    // not undefined, but defined right above\n    instanceMap.set(element, instance);\n  },\n\n  /**\n   * Returns all instances for specified component.\n   *\n   * @param component the component's name or a unique key\n   * @returns all the component instances\n   */\n  getAllFor: <T>(component: string): Map<HTMLElement, T> | null => {\n    const instanceMap = componentData.get(component) as Map<HTMLElement, T>;\n\n    return instanceMap || null;\n  },\n\n  /**\n   * Returns the instance associated with the target.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   * @returns the instance\n   */\n  get: <T>(element: HTMLElement, component: string): T | null => {\n    if (!isHTMLElement(element) || !component) return null;\n    const instanceMap = Data.getAllFor<T>(component);\n    // const instanceMap = componentData.get(component) as Map<HTMLElement, InstanceType<T>>;\n\n    const instance = element && instanceMap && instanceMap.get(element);\n\n    // return (instance as T) || null;\n    return instance || null;\n  },\n\n  /**\n   * Removes web components data.\n   *\n   * @param element target element\n   * @param component the component's name or a unique key\n   */\n  remove: <T>(element: HTMLElement, component: string): void => {\n    const instanceMap = Data.getAllFor<T>(component);\n    // const instanceMap = componentData.get(component) as Map<HTMLElement, InstanceType<T>>;\n\n    if (!instanceMap || !isHTMLElement(element)) return;\n\n    instanceMap.delete(element);\n\n    /* istanbul ignore else */\n    if (instanceMap.size === 0) {\n      componentData.delete(component);\n    }\n  },\n};\n\nexport default Data;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,aAAA,uBAAoB,GAAmC,EAAA,CAAA;AAO7D,MAAM,IAAO,GAAA;AAAA,EAQX,GAAK,EAAA,CAAI,OAAsB,EAAA,SAAA,EAAmB,QAAsB,KAAA;AACtE,IAAI,IAAA,CAAC,cAAc,OAAO,CAAA;AAAG,MAAA,OAAA;AAG7B,IAAA,IAAI,CAAC,aAAA,CAAc,GAAI,CAAA,SAAS,CAAG,EAAA;AACjC,MAAA,aAAA,CAAc,GAAI,CAAA,SAAA,kBAAe,IAAA,GAAA,EAAqB,CAAA,CAAA;AAAA,KACxD;AAEA,IAAM,MAAA,WAAA,GAAc,aAAc,CAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAE/C,IAAY,WAAA,CAAA,GAAA,CAAI,SAAS,QAAQ,CAAA,CAAA;AAAA,GACnC;AAAA,EAQA,SAAA,EAAW,CAAI,SAAkD,KAAA;AAC/D,IAAM,MAAA,WAAA,GAAc,aAAc,CAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAE/C,IAAA,OAAO,WAAe,IAAA,IAAA,CAAA;AAAA,GACxB;AAAA,EASA,GAAA,EAAK,CAAI,OAAA,EAAsB,SAAgC,KAAA;AAC7D,IAAA,IAAI,CAAC,aAAA,CAAc,OAAO,CAAA,IAAK,CAAC,SAAA;AAAW,MAAO,OAAA,IAAA,CAAA;AAClD,IAAM,MAAA,WAAA,GAAc,IAAK,CAAA,SAAA,CAAa,SAAS,CAAA,CAAA;AAG/C,IAAA,MAAM,QAAW,GAAA,OAAA,IAAW,WAAe,IAAA,WAAA,CAAY,IAAI,OAAO,CAAA,CAAA;AAGlE,IAAA,OAAO,QAAY,IAAA,IAAA,CAAA;AAAA,GACrB;AAAA,EAQA,MAAA,EAAQ,CAAI,OAAA,EAAsB,SAA4B,KAAA;AAC5D,IAAM,MAAA,WAAA,GAAc,IAAK,CAAA,SAAA,CAAa,SAAS,CAAA,CAAA;AAG/C,IAAA,IAAI,CAAC,WAAA,IAAe,CAAC,aAAA,CAAc,OAAO,CAAA;AAAG,MAAA,OAAA;AAE7C,IAAA,WAAA,CAAY,OAAO,OAAO,CAAA,CAAA;AAG1B,IAAI,IAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAC1B,MAAA,aAAA,CAAc,OAAO,SAAS,CAAA,CAAA;AAAA,KAChC;AAAA,GACF;AACF;;;;"}