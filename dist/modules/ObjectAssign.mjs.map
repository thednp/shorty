{"version":3,"file":"ObjectAssign.mjs","sources":["../../src/misc/ObjectAssign.ts"],"sourcesContent":["/**\n * Overloads for Object.assign.\n *\n * @see https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/object-assign/index.d.ts\n */\ndeclare function ObjectAssignTyped<T, U>(target: T, source: U): T & U;\ndeclare function ObjectAssignTyped<T, U, V>(target: T, source1: U, source2: V): T & U & V;\ndeclare function ObjectAssignTyped<T, U, V, W>(\n  target: T,\n  source1: U,\n  source2: V,\n  source3: W,\n): T & U & V & W;\ndeclare function ObjectAssignTyped<T, U, V, W, Q>(\n  target: T,\n  source1: U,\n  source2: V,\n  source3: W,\n  source4: Q,\n): T & U & V & W & Q;\ndeclare function ObjectAssignTyped<T, U, V, W, Q, R>(\n  target: T,\n  source1: U,\n  source2: V,\n  source3: W,\n  source4: Q,\n  source5: R,\n): T & U & V & W & Q & R;\ndeclare function ObjectAssignTyped(target: any, ...sources: any[]): any;\n\n/**\n * Shortcut for `Object.assign()` static method.\n *\n * @param obj a target object\n * @param source source object(s)\n * @see https://github.com/devinrhode2/ObjectTyped/blob/master/src/index.ts\n */\nconst ObjectAssign: typeof ObjectAssignTyped = <A extends Record<string, any>, B>(\n  obj: A,\n  ...source: B[]\n): B extends Record<string, any>[] ? any : A & B => Object.assign(obj, ...source);\n\nexport default ObjectAssign;\n"],"names":[],"mappings":"AAqCM,MAAA,YAAA,GAAyC,CAC7C,GACG,EAAA,GAAA,MAAA,KAC+C,OAAO,MAAO,CAAA,GAAA,EAAK,GAAG,MAAM;;;;"}