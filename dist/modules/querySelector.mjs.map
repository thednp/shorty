{"version":3,"file":"querySelector.mjs","sources":["../../src/selectors/querySelector.ts"],"sourcesContent":["import getDocument from '../get/getDocument';\nimport isNode from '../is/isNode';\nimport isHTMLElement from '../is/isHTMLElement';\n\n/**\n * Utility to check if target is typeof `HTMLElement`, `Element`, `Node`\n * or find one that matches a selector.\n *\n * @param selector the input selector or target element\n * @param parent optional node to look into\n * @return the `HTMLElement` or `querySelector` result\n */\nconst querySelector = (selector: HTMLElement | string, parent?: ParentNode): HTMLElement | null => {\n  if (isHTMLElement(selector)) {\n    return selector;\n  }\n  const lookUp = isNode(parent) ? parent : getDocument();\n\n  return lookUp.querySelector(selector);\n};\n\nexport default querySelector;\n"],"names":[],"mappings":";;;;;;;AAYM,MAAA,aAAA,GAAgB,CAAC,QAAA,EAAgC,MAA4C,KAAA;AACjG,EAAI,IAAA,aAAA,CAAc,QAAQ,CAAG,EAAA;AAC3B,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AACA,EAAA,MAAM,MAAS,GAAA,MAAA,CAAO,MAAM,CAAA,GAAI,SAAS,WAAY,EAAA,CAAA;AAErD,EAAO,OAAA,MAAA,CAAO,cAAc,QAAQ,CAAA,CAAA;AACtC;;;;"}